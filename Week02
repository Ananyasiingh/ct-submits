class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def add_node(self, data):
        """Add a node with given data to the end of the list"""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return

        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def print_list(self):
        """Print all nodes in the list"""
        if not self.head:
            print("List is empty.")
            return

        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        """Delete the nth node (1-based index) from the list"""
        if not self.head:
            raise Exception("Cannot delete from an empty list.")

        if n <= 0:
            raise IndexError("Index must be 1 or greater.")

        # Deleting the head
        if n == 1:
            deleted_data = self.head.data
            self.head = self.head.next
            print(f"Deleted node at index 1 (value: {deleted_data})")
            return

        current = self.head
        count = 1

        while current and count < n - 1:
            current = current.next
            count += 1

        if not current or not current.next:
            raise IndexError("Index out of range.")

        deleted_data = current.next.data
        current.next = current.next.next
        print(f"Deleted node at index {n} (value: {deleted_data})")


# ðŸš€ Test the implementation
if __name__ == "__main__":
    ll = LinkedList()
    
    # Add nodes
    ll.add_node(10)
    ll.add_node(20)
    ll.add_node(30)
    ll.add_node(40)

    print("Initial List:")
    ll.print_list()

    # Delete a valid node
    ll.delete_nth_node(3)  # Should delete 30
    print("List after deleting 3rd node:")
    ll.print_list()

    # Try deleting with an invalid index
    try:
        ll.delete_nth_node(10)
    except Exception as e:
        print(f"Exception: {e}")

    # Try deleting from empty list
    empty_list = LinkedList()
    try:
        empty_list.delete_nth_node(1)
    except Exception as e:
        print(f"Exception: {e}")
